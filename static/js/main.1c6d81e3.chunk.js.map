{"version":3,"sources":["assets/JrGiantLogo.svg","assets/AllTopSVGs.svg","assets/AllTopSVGsSmall.svg","assets/Git.svg","assets/Github.svg","assets/verdaccio.svg","assets/Npm.svg","assets/lerna-hero.svg","assets/SharePointReactLogo.svg","assets/circuit-board.svg","components/header.tsx","components/desk.tsx","components/card.tsx","components/cards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","header","logo","id","className","src","alt","desk","TopSVGBig","TopSVGSmall","card","headline","body","style","maxWidth","cards","gitlogos","gridTemplateColumns","display","Github","width","Git","reusableComponenets","gridTemplateAreas","NPM","gridArea","Verdaccio","Lerna","backgroundImage","circutBoard","SharePointReact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,2C,yKC6B5BC,EArBiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAG9B,yBAAKC,GAAG,UACW,kBAATD,EACJ,yBAAKE,UAAU,OAAOC,IAAKH,EAAMI,IAAI,SACrCJ,I,gCCIOK,EAVe,kBAC5B,yBAAKJ,GAAG,gBACN,yBAAKC,UAAU,gCACf,yBAAKD,GAAG,QACN,yBAAKE,IAAKG,IAAWL,GAAG,gBAAgBG,IAAI,yDAC5C,yBAAKD,IAAKI,IAAaN,GAAG,kBAAkBG,IAAI,4DCGvCI,EARe,SAAC,GAAD,IAAGR,EAAH,EAAGA,KAAMS,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,KAAnB,OAC5B,yBAAKR,UAAU,QACI,kBAATF,EAAoB,yBAAKG,IAAKH,EAAMI,IAAKK,EAAUE,MAAO,CAACC,SAAS,SAAYZ,EACxF,4BAAKS,GACL,2BAAIC,K,mHCFO,SAASG,IACtB,IAAMC,EACJ,yBAAKZ,UAAU,WAAWS,MAAO,CAAEI,oBAAqB,UAAWC,QAAQ,SACzE,yBAAKb,IAAKc,IAAQN,MAAO,CAACO,MAAM,OAAQd,IAAI,KAC5C,yBAAKD,IAAKgB,IAAKf,IAAI,MAGjBgB,EACJ,yBAAKlB,UAAU,qBAAqBS,MAAO,CAAEU,kBAAmB,2BAA4BL,QAAS,SACnG,yBAAKb,IAAKmB,IAAKlB,IAAI,GAAGO,MAAO,CAAEY,SAAU,SACzC,yBAAKpB,IAAKqB,IAAWpB,IAAI,GAAGO,MAAO,CAAEY,SAAU,UAC/C,yBAAKpB,IAAKsB,IAAOrB,IAAI,GAAGO,MAAO,CAAEY,SAAU,YAI/C,OACE,yBAAKrB,UAAU,gBAAgBS,MAAO,CAAEe,gBAAgB,OAAD,OAASC,IAAT,OACrD,kBAAC,EAAD,CACE3B,KAAM4B,IACNnB,SAAS,iCACTC,KAAK,2DAEP,kBAAC,EAAD,CACEV,KAAMoB,EACNX,SAAS,sBACTC,KAAK,uJAEP,kBAAC,EAAD,CACEV,KAAMc,EACNL,SAAS,mCACTC,KAAK,gF,MCvBEmB,MAVf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAAQF,KAAMA,MACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c6d81e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/JrGiantLogo.7b90480f.svg\";","module.exports = __webpack_public_path__ + \"static/media/AllTopSVGs.91672bd5.svg\";","module.exports = __webpack_public_path__ + \"static/media/AllTopSVGsSmall.18fb71ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/Git.7b9fdcdd.svg\";","module.exports = __webpack_public_path__ + \"static/media/Github.75a2564c.svg\";","module.exports = __webpack_public_path__ + \"static/media/verdaccio.3c897547.svg\";","module.exports = __webpack_public_path__ + \"static/media/Npm.330a3e75.svg\";","module.exports = __webpack_public_path__ + \"static/media/lerna-hero.4295c08d.svg\";","module.exports = __webpack_public_path__ + \"static/media/SharePointReactLogo.3dac2150.svg\";","module.exports = __webpack_public_path__ + \"static/media/circuit-board.2b8c9409.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\ninterface Props {\n  logo: string|JSX.Element\n}\n\nconst header: React.FC<Props> = ({ logo }) => (\n\n\n  <div id=\"header\">\n    {typeof logo === 'string'\n      ? <img className=\"logo\" src={logo} alt=\"logo\" />\n      : logo}\n  </div>\n);\n\nheader.propTypes = {\n  logo: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n  ]).isRequired,\n};\n\n// header.defaultProps = {\n//   logo: '',\n// };\n\nexport default header;\n","import React from 'react';\nimport TopSVGBig from '../assets/AllTopSVGs.svg';\nimport TopSVGSmall from '../assets/AllTopSVGsSmall.svg';\n\ninterface Props {\n\n}\n\nconst desk: React.FC<Props> = () => (\n  <div id=\"desk_section\">\n    <div className=\"no-right-side-triangle blue\" />\n    <div id=\"desk\">\n      <img src={TopSVGBig} id=\"bigHeaderSVGs\" alt=\"Man at desk with logos of technology floating around\" />\n      <img src={TopSVGSmall} id=\"smallHeaderSVGs\" alt=\"Man at desk with logos of technology floating around\" />\n    </div>\n  </div>\n);\n\nexport default desk;\n","import React from 'react';\n\ninterface Props {\n  logo: string | JSX.Element,\n  headline: string,\n  body: string,\n}\n\nconst card: React.FC<Props> = ({ logo, headline, body }) => (\n  <div className=\"card\">\n    {typeof logo === 'string' ? <img src={logo} alt={headline} style={{maxWidth:'45%'}}/> : logo}\n    <h2>{headline}</h2>\n    <p>{body}</p>\n  </div>\n);\n\nexport default card;\n","import React, { ReactElement } from 'react';\nimport Card from './card';\nimport Git from '../assets/Git.svg';\nimport Github from '../assets/Github.svg';\nimport Verdaccio from '../assets/verdaccio.svg';\nimport NPM from '../assets/Npm.svg';\nimport Lerna from '../assets/lerna-hero.svg';\nimport SharePointReact from '../assets/SharePointReactLogo.svg';\nimport circutBoard from '../assets/circuit-board.svg';\n\nexport default function cards(): ReactElement {\n  const gitlogos = (\n    <div className=\"gitLogos\" style={{ gridTemplateColumns: '1fr 1fr', display:'grid' }}>\n      <img src={Github} style={{width:'45%'}} alt=\"\" />\n      <img src={Git} alt=\"\" />\n    </div>\n  );\n  const reusableComponenets = (\n    <div className=\"reusableComponents\" style={{ gridTemplateAreas: \"'npm lerna' 'verd lerna'\", display: 'grid' }}>\n      <img src={NPM} alt=\"\" style={{ gridArea: 'npm' }} />\n      <img src={Verdaccio} alt=\"\" style={{ gridArea: 'verd' }} />\n      <img src={Lerna} alt=\"\" style={{ gridArea: 'lerna' }} />\n    </div>\n  );\n\n  return (\n    <div className=\"cards-section\" style={{ backgroundImage: `url(${circutBoard})` }}>\n      <Card\n        logo={SharePointReact}\n        headline=\"React Based SharePoint Add-ins\"\n        body=\"SharePoint Apps (Add-ins) built using ReactJS and SCSS\"\n      />\n      <Card\n        logo={reusableComponenets}\n        headline=\"Reusable Components\"\n        body=\"Reusable React Components built as NPM packages stored locally using the NPM proxy Verdaccio and stored in GitHub as a mono repo build using Lerna\"\n      />\n      <Card\n        logo={gitlogos}\n        headline=\"Industry standard source control\"\n        body=\"Implemented industry standard source control as a primary development need\"\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport logo from './assets/JrGiantLogo.svg';\nimport Header from './components/header';\nimport Desk from './components/desk';\nimport Cards from './components/cards';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header logo={logo} />\n      <Desk />\n      <Cards />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}